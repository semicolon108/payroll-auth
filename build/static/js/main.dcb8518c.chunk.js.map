{"version":3,"sources":["graphql/auth.ts","services/apollo-client.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["LOGIN","gql","apolloClient","ApolloClient","uri","cache","InMemoryCache","validationSchema","yup","shape","email","required","password","min","max","App","login","loading","error","useMutation","onCompleted","_ref","window","location","href","checkIsError","fieldName","msg","graphQLErrors","message","React","createElement","className","Formik","initialValues","onSubmit","values","variables","_ref2","handleSubmit","handleChange","errors","src","style","height","alt","htmlFor","onChange","value","name","id","type","placeholder","Boolean","hostname","match","ReactDOM","render","StrictMode","ApolloProvider","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"uNAEO,MAAMA,E,OAAQC,CAAG;;;;;;;;;;kDCaTC,MANM,IAAIC,IAAa,CAClCC,IAJqB,8CAKrBC,MAAO,IAAIC,MCHf,MAAMC,EAAmBC,MAAaC,MAAM,CACxCC,MAAOF,MAAaE,QAAQC,WAC5BC,SAAUJ,MAAaK,IAAI,GAAGC,IAAI,KAAKH,aAuG5BI,MAnGf,WACI,MAAOC,GAAO,QAACC,EAAO,MAAEC,IAAUC,YAAYnB,EAAO,CACjDoB,YAAWC,GAAW,IAAV,MAACL,GAAMK,EACfC,OAAOC,SAASC,KAAO,6CAA4BR,KAIrDS,EAAgBC,IAClB,MAAMC,EAAW,OAALT,QAAK,IAALA,OAAK,EAALA,EAAOU,cAAc,GAAGC,QACpC,OAAQH,GACJ,IAAK,QACD,MAAY,oBAARC,EAAkCA,EAC/B,KAEX,IAAK,WACD,MAAY,uBAARA,EAAqCA,EAClC,KAEX,IAAK,QACD,GAAW,kCAARA,EAAyC,OAAOA,IAK/D,OACIG,IAAAC,cAAA,OAAKC,UAAU,2CACXF,IAAAC,cAAA,OAAKC,UAAU,mBACXF,IAAAC,cAACE,IAAM,CACHC,cAAe,CACXxB,MAAO,GACPE,SAAU,IAEdL,iBAAkBA,EAClB4B,SAAWC,GAAWpB,EAAM,CAACqB,UAAWD,KAEvCE,IAAA,IAAC,aAACC,EAAY,aAAEC,EAAY,OAAEJ,EAAM,OAAEK,GAAOH,EAAA,OAC1CR,IAAAC,cAAA,QAAMI,SAAUI,EAAcP,UAAU,qDAEpCF,IAAAC,cAAA,OAAKC,UAAU,uBACXF,IAAAC,cAAA,OAAKW,IAAI,uBAAuBC,MAAO,CAAEC,OAAQ,KAAOC,IAAI,MAEhEf,IAAAC,cAAA,KAAGC,UAAU,8CAA8CP,EAAa,UACxEK,IAAAC,cAAA,MAAIC,UAAU,0CAAyC,SACvDF,IAAAC,cAAA,OAAKC,UAAU,QACXF,IAAAC,cAAA,SAAOC,UAAU,6CAA6Cc,QAAQ,SAAQ,SAG9EhB,IAAAC,cAAA,SACIgB,SAAUP,EACVQ,MAAOZ,EAAO1B,MACduC,KAAK,QACLjB,UAAU,6HACVkB,GAAG,QACHC,KAAK,OACLC,YAAY,UAChBtB,IAAAC,cAAA,KAAGC,UAAU,qBAAqBS,EAAO/B,OACzCoB,IAAAC,cAAA,KAAGC,UAAU,sBAAsBS,EAAO/B,OAASe,EAAa,WAEpEK,IAAAC,cAAA,OAAKC,UAAU,QACXF,IAAAC,cAAA,SAAOC,UAAU,6CAA6Cc,QAAQ,YAAW,YAGjFhB,IAAAC,cAAA,SACIgB,SAAUP,EACVQ,MAAOZ,EAAOxB,SACdqC,KAAK,WACLjB,UAAU,6HACVkB,GAAG,WACHC,KAAK,WACLC,YAAY,uBAEhBtB,IAAAC,cAAA,KAAGC,UAAU,qBAAqBS,EAAO7B,UACzCkB,IAAAC,cAAA,KAAGC,UAAU,sBAAsBS,EAAO7B,UAAYa,EAAa,cAEvEK,IAAAC,cAAA,OAAKC,UAAU,qCAEPf,EACIa,IAAAC,cAAA,UACIC,UAAU,wCAAuC,cAGrDF,IAAAC,cAAA,UACIoB,KAAK,SACLnB,UAAU,uHAAsH,cAQ5JF,IAAAC,cAAA,KAAGC,UAAU,qCAAoC,8CC7F7CqB,QACW,cAA7B/B,OAAOC,SAAS+B,UAEe,UAA7BhC,OAAOC,SAAS+B,UAEhBhC,OAAOC,SAAS+B,SAASC,MACvB,2D,aCVNC,IAASC,OACP3B,IAAAC,cAACD,IAAM4B,WAAU,KACb5B,IAAAC,cAAC4B,IAAc,CAACC,OAAQ1D,GACtB4B,IAAAC,cAAChB,EAAG,QAGV8C,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAKC,IACJA,EAAaC,eAEdC,MAAMnD,IACLoD,QAAQpD,MAAMA,EAAMW,a","file":"static/js/main.dcb8518c.chunk.js","sourcesContent":["import {gql} from \"@apollo/client\";\r\n\r\nexport const LOGIN = gql`    \r\n    mutation (\r\n        $email: String!\r\n        $password: String!\r\n    ) {\r\n        login(\r\n            email: $email\r\n            password: $password\r\n        )\r\n    }\r\n`","import { ApolloClient, InMemoryCache } from '@apollo/client';\r\n\r\nconst isProd = process.env.NODE_ENV === 'production' && true\r\n\r\n\r\nexport const loginURL = isProd ? 'https://payroll.hr-sabai.com' : 'http://localhost:8080'\r\nconst baseURL = isProd ? 'https://payroll-server.hr-sabai.com/graphql' : 'http://localhost:4000/graphql'\r\n\r\n\r\nconst apolloClient = new ApolloClient({\r\n    uri: baseURL,\r\n    cache: new InMemoryCache()\r\n});\r\n\r\n\r\nexport default apolloClient","import React from 'react';\r\nimport {LOGIN} from \"./graphql/auth\";\r\nimport {useMutation} from '@apollo/react-hooks'\r\nimport {Formik} from 'formik'\r\nimport * as yup from 'yup'\r\nimport Bear from \"./components/Bear\";\r\nimport {loginURL} from \"./services/apollo-client\";\r\n\r\nconst validationSchema = yup.object().shape({\r\n    email: yup.string().email().required(),\r\n    password: yup.string().min(6).max(192).required()\r\n})\r\n\r\n\r\nfunction App() {\r\n    const [login, {loading, error}] = useMutation(LOGIN, {\r\n        onCompleted({login}) {\r\n            window.location.href = `${loginURL}/?accessToken=${login}`\r\n        }\r\n    })\r\n\r\n    const checkIsError = (fieldName: string) => {\r\n        const msg = error?.graphQLErrors[0].message\r\n        switch (fieldName) {\r\n            case 'email': {\r\n                if (msg === 'Incorrect email') return msg\r\n                return null\r\n            }\r\n            case 'password': {\r\n                if (msg === 'Incorrect password') return msg\r\n                return null\r\n            }\r\n            case 'admin': {\r\n                if(msg === 'You are not the administrator') return msg\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex h-full justify-center items-center\">\r\n            <div className=\"w-full max-w-md\">\r\n                <Formik\r\n                    initialValues={{\r\n                        email: '',\r\n                        password: ''\r\n                    }}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values) => login({variables: values})}\r\n                >\r\n                    {({handleSubmit, handleChange, values, errors}) => (\r\n                        <form onSubmit={handleSubmit} className=\"bg-white shadow-md rounded-lg px-8 pt-6 pb-8 mb-4\">\r\n                            {/* <Bear/> */}\r\n                            <div className=\"flex justify-center\">\r\n                                <img src=\"/img/hr-sabai-sq.svg\" style={{ height: 210 }} alt=\"\"/>\r\n                            </div>\r\n                            <p className=\"text-center text-red-600 text-xl font-bold\">{checkIsError('admin')}</p>\r\n                            <h1 className=\" text-4xl font-bold text-gray-700 mb-3\">Login</h1>\r\n                            <div className=\"mb-4\">\r\n                                <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"email\">\r\n                                    Email\r\n                                </label>\r\n                                <input\r\n                                    onChange={handleChange}\r\n                                    value={values.email}\r\n                                    name=\"email\"\r\n                                    className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n                                    id=\"email\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"email\"/>\r\n                                <p className=\"text-red-600 mt-1\">{errors.email}</p>\r\n                                <p className=\"text-red-600 mb-1\">{!errors.email && checkIsError('email')}</p>\r\n                            </div>\r\n                            <div className=\"mb-6\">\r\n                                <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"password\">\r\n                                    Password\r\n                                </label>\r\n                                <input\r\n                                    onChange={handleChange}\r\n                                    value={values.password}\r\n                                    name=\"password\"\r\n                                    className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    placeholder=\"******************\"\r\n                                />\r\n                                <p className=\"text-red-600 mt-1\">{errors.password}</p>\r\n                                <p className=\"text-red-600 mt-1\">{!errors.password && checkIsError('password')}</p>\r\n                            </div>\r\n                            <div className=\"flex items-center justify-between\">\r\n                                {\r\n                                    loading ?\r\n                                        <button\r\n                                            className=\"w-full bg-gray-500 py-2 px-4 rounded\">\r\n                                            Loading...</button>\r\n                                        :\r\n                                        <button\r\n                                            type=\"submit\"\r\n                                            className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n                                            Submit\r\n                                        </button>\r\n                                }\r\n                            </div>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n                <p className=\"text-center text-gray-500 text-xs\">\r\n                    &copy;2021 HR-Sabai. All rights reserved.\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ApolloProvider } from '@apollo/client';\r\nimport apolloClient from \"./services/apollo-client\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <ApolloProvider client={apolloClient}>\r\n        <App />\r\n      </ApolloProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}